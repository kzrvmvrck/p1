                *** ВОЗВРАЩАЕМЫ ЗНАЧЕНИЯ ОТ УВЕДОМЛЕНИЙ ***

alert() - показывает просто сообщение и ждет нажатия кнопки ОК.
prompt() - Принимает два аргумента. Выдвет поле ввода, где пользователь вводит какие-то данные, после чего
можно нажать ОК или ОТМЕНА. При нажатии на ОК, значние сохраняется в переменной (тип данных - текст).
При нажатии на ОТМЕНА или нажали клавищу ESC, в этом случае знаение переменной присвоится null.

confirm() - Выводит вопрос и двв кнопки ОК и ОТМЕНА. Если нажата кнопка ОК вернет true, вдругих случаях false.


                *** ПРЕОБРАЗОВАНИЕ ТИПОВ (ЧТО ОНИ ВОЗВРАЩАЮТ) ***

Численное преобразование:
    undefined   -->     NaN
    null        -->     0
    true/false  -->     1/0
    string      -->     знаки табуляции, пробелы, и т.п. обрезаются, далее если получаем пустую строку то
                        получаем 0. Из непустой строки считываем численное значение. При ошибке вернет NaN

Логическое преобразование:
    0, null, undefined, NaN, пустая строка  -->     становится false
    остальные случаеи                       -->     становится true
    ! строка с "0" (она не пустая)          -->     это true

Численное преобразование:
    строки преобразуются в числа    -->     "6"/"2" = 3
    ! если строка не может явно быть приведена к числу, то вернет NaN


                *** ЛОГИЧЕСКИ ОПЕРАТОРЫ ***

    || (ИЛИ):
    проверяет все операнды (они приводятся к логическому типу), ПЕРВОЕ найденное true останавливает поиск и
    возвращает значение операнда. Если true не найдно (т.е. все false), возвращает ПОСЛЕДНЕЕ, в исходном
    виде без преобразования.

    ||= (логическое присваивание ИЛИ):
    Это синтаксический сахар. Если первый операнд false, то ему присваивается значение второго операнда.

    && (И):
    проверяет все операнды (они приводятся к логическому типу), ПЕРВОЕ найденное false останавливает поиск и
    возвращает значение операнда. Если false не найдно (т.е. все true), возвращает ПОСЛЕДНЕЕ, в исходном
    виде без преобразования.

ПРИОРИТЕТ && БОЛЬШЕ ЧЕМ У ||

    &&= (логическое присваивание):
    Принцип действия такой же ка и у ИЛИ, но с одним отличием, значение втрого операнда  присвоится первому
    только в том случае если первый операнд true!

    ! (НЕ):
    приводит значение к логическому, а потом меняет на противоположное.
    ЯВЛЯЕТСЯ У ! ВЫСШИЙ ПО ОТНОШЕНИЮ К ДРУГИМ ЛОГИЧЕСКИМ ОПЕРАТОРАМ


             *** ОПЕРАТОРЫ НУЛЕВОГО СЛИЯНИЯ И ПРИСВАИВАНИЯ ***
    ?? (оператор нулевого слияния):
    его необходисть вызвана необходимостью проверки на значение которое отсутствует (null и andefined)
    Работает так же как ||, различие в том, что ИЛИ при проверки и столкновении с null, undefined, 0, пустой
    строкой или NaN вернет первое true и присвоит последнее значение, в то время как оператор нулевого слияния
    (??) присвоит значение по умолчанию (альтенативное) только в том случае, если операнд равен null или
    undefined. Другими словами, оператор нулевого слияния используется тогда, когда есть необходимость
    присвоить значение по умолчании.

    Пример:
            let height = 0;

            alert(height || 100); // 100 так как 0 это логическое false
            alert(height ?? 100); // 0 так как height не является ни null ни undefined (оно равно 0)

    ??= (оператор нулевого присваивания):
    Очень прост. Он присвоит указанное значение только в том случае если проверяемы операнд равен null или
    undefined.

    Пример:
            ley userAge = null;

            userAge ??= 18;
            alert(userAge); // 18   присвоит значение переменной userAge равное 18, так как оно null.


           *** ЦИКЛЫ WHILE И FOR ***
        Не забывай что есть указатели, позволяющие прекратить циклы которые на разных уровнях вложенности


           *** КОНСТРУКЦИЯ SWITCH ***

        Все очень просто, не вижу смысла конспектирования


           *** ФУНКЦИИ ***

        Придуманы для того, чтобы облегчить необходимость применения одного и того же кода, в разных частях программы.
    В функциях могут как присутствовать, так и отсутствовать параметры. Параметры функции это такие "переменные", которые
    принимает функция для выполнения того блока кода, который находится в теле функции. Тело функции, в ходе своей
    работы может влиять, только на то что внутки этой функции. Другими словами, появляется такое понятие как область
    видимости... Все переменные, которые были объявлены вне функции, будут иметь глобальную область видимости. Это означает,
    что переменную с глобальной областью видимости, могут использовать и изменять все функции. Если же переменная,
    объявлена в теле функции, то ее область видимости распространяется только на функцию, внутри которой она объявлена.
        Глобальные переменные могут быть применены в качестве параметров функции. Если имя глобальной переменной совпадает
    с названием параметра функции, то в ходе работы функции, с глобальной переменной ничего не происходит на глобальном
    уровне. Применение глобальных переменных, лучше сводить к минимуму, а лучше лучше чтобы они вовсе отсутствовали.
        Значение по умолчанию, еще одна важная штука в функциях. Речь идет о том случае, когда при объявлении функции,
    было обозначено, что функция может принимать 2, 3 или больше параметров. Но при использовании функции, пользователь
    или сознательно или по ошибке, указал только 1 параметр или вовсе не одного. В таких случаях, JavaScript сделает
    значение параметра как undefined (неопределено), это может привести к некрасивому результату.
        Функции могут возвращать какие либо значения, а значит результат работы функции, может быть присвоен какой либо
    переменной. Для того чтобы функция вернула значение, применяется слово return. Так же, слово return дает понять
    функции, что это место немедленного выхода из функции (с этим осторожнее). В случая если после слова return в
    функции, не будет указано что именно она должна вернуть, то она вернет undefined.
        Имя функции должно быть коротки и понятным, другими словами название функции говорит нам что она делает.
        Лучше 5 функци которые делают одно действие, чем 1 которая делает 5 дейтсвий.

        function sum(a, b) {
          let result = a + b;

          return result;
        }

        Функции в основном это сущностии которы мы привыкли декларировать (т.е. создавать). В JavaScript существует
    синтаксис который позволяет нам создавать функцию посреди любого выражения. (Это что-то новенькое!). Такой синтаксис
    называется "функциональное выражение".

        let sum = function(a, b) {
          let result = a + b;

          return result;
        };

        Функции-колбэки



        Функции-стрелки

        Это скорее механизм который облегчает написание кода. Чем то похож на возможности Python. Разбери подробнее пример
    станет понятнее.

    // выражение в правой части
    let sum = (a, b) => a + b;

    // многострочный код в фигурных скобках { ... }, здесь нужен return:
    let sum = (a, b) => {
      // ...
      return a + b;
    }

    // без аргументов
    let sayHi = () => alert("Привет");

    // с одним аргументом
    let double = n => n * 2;









