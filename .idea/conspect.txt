                *** ВОЗВРАЩАЕМЫ ЗНАЧЕНИЯ ОТ УВЕДОМЛЕНИЙ ***

alert() - показывает просто сообщение и ждет нажатия кнопки ОК.
prompt() - Принимает два аргумента. Выдвет поле ввода, где пользователь вводит какие-то данные, после чего
можно нажать ОК или ОТМЕНА. При нажатии на ОК, значние сохраняется в переменной (тип данных - текст).
При нажатии на ОТМЕНА или нажали клавищу ESC, в этом случае знаение переменной присвоится null.

confirm() - Выводит вопрос и двв кнопки ОК и ОТМЕНА. Если нажата кнопка ОК вернет true, вдругих случаях false.


                *** ПРЕОБРАЗОВАНИЕ ТИПОВ (ЧТО ОНИ ВОЗВРАЩАЮТ) ***

Численное преобразование:
    undefined   -->     NaN
    null        -->     0
    true/false  -->     1/0
    string      -->     знаки табуляции, пробелы, и т.п. обрезаются, далее если получаем пустую строку то
                        получаем 0. Из непустой строки считываем численное значение. При ошибке вернет NaN

Логическое преобразование:
    0, null, undefined, NaN, пустая строка  -->     становится false
    остальные случаеи                       -->     становится true
    ! строка с "0" (она не пустая)          -->     это true

Численное преобразование:
    строки преобразуются в числа    -->     "6"/"2" = 3
    ! если строка не может явно быть приведена к числу, то вернет NaN


                *** ЛОГИЧЕСКИ ОПЕРАТОРЫ ***

    || (ИЛИ):
    проверяет все операнды (они приводятся к логическому типу), ПЕРВОЕ найденное true останавливает поиск и
    возвращает значение операнда. Если true не найдно (т.е. все false), возвращает ПОСЛЕДНЕЕ, в исходном
    виде без преобразования.

    ||= (логическое присваивание ИЛИ):
    Это синтаксический сахар. Если первый операнд false, то ему присваивается значение второго операнда.

    && (И):
    проверяет все операнды (они приводятся к логическому типу), ПЕРВОЕ найденное false останавливает поиск и
    возвращает значение операнда. Если false не найдно (т.е. все true), возвращает ПОСЛЕДНЕЕ, в исходном
    виде без преобразования.

ПРИОРИТЕТ && БОЛЬШЕ ЧЕМ У ||

    &&= (логическое присваивание):
    Принцип действия такой же ка и у ИЛИ, но с одним отличием, значение втрого операнда  присвоится первому
    только в том случае если первый операнд true!

    ! (НЕ):
    приводит значение к логическому, а потом меняет на противоположное.
    ЯВЛЯЕТСЯ У ! ВЫСШИЙ ПО ОТНОШЕНИЮ К ДРУГИМ ЛОГИЧЕСКИМ ОПЕРАТОРАМ


             *** ОПЕРАТОРЫ НУЛЕВОГО СЛИЯНИЯ И ПРИСВАИВАНИЯ ***
    ?? (оператор нулевого слияния):
    его необходисть вызвана необходимостью проверки на значение которое отсутствует (null и andefined)
    Работает так же как ||, различие в том, что ИЛИ при проверки и столкновении с null, undefined, 0, пустой
    строкой или NaN вернет первое true и присвоит последнее значение, в то время как оператор нулевого слияния
    (??) присвоит значение по умолчанию (альтенативное) только в том случае, если операнд равен null или
    undefined. Другими словами, оператор нулевого слияния используется тогда, когда есть необходимость
    присвоить значение по умолчании.

    Пример:
            let height = 0;

            alert(height || 100); // 100 так как 0 это логическое false
            alert(height ?? 100); // 0 так как height не является ни null ни undefined (оно равно 0)

    ??= (оператор нулевого присваивания):
    Очень прост. Он присвоит указанное значение только в том случае если проверяемы операнд равен null или
    undefined.

    Пример:
            ley userAge = null;

            userAge ??= 18;
            alert(userAge); // 18   присвоит значение переменной userAge равное 18, так как оно null.


           *** ЦИКЛЫ WHILE И FOR ***


